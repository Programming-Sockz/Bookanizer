@page "/"
@using Blazored.LocalStorage
@using Blazored.Modal.Services
@using Bookanizer.Shared.DTO
@using Bookanizer.Shared.Libraries
@using Bookanizer.Client.Components

<div class="nav-bar-menu">
    @if (loggedInUser.Id != Guid.Empty)
    {
        <p>Logged in as: @loggedInUser.UserName</p>
        <div class="pseudo-button"><a @onclick="LogOut">Logout</a></div>
    }
    else
    {
        <div class="pseudo-button"><a href="login" style="text-decoration: none; color: black">Login</a></div>
        <div class="pseudo-button"><a href="register" style="text-decoration: none; color: black">Register</a></div>
    }
    <button @onclick="ShowMenu">...</button>
    <div class="menu" style="position:absolute; top:40px;right:0;width:200px;border:solid 2px black; padding:10px" hidden="@showMenu">
        <a href="index">Index seite (razor beispiele)</a>
        <a href="apiexamples">Api-Examples</a>
        <hr/>
        <a href="create">Create book</a>
	</div>
</div>
<div class="text-center">
    <div class="homepage-icon">
    </div>
    <div class="">
        <input class="search-input" style="width:200px" placeholder=" Search..." @bind-value="searchText"/>
        <button @onclick="StartSearch">Search</button>
    </div>
</div>
<div class="page-description">
    <p>
        Welcome to Bookanizer!
    </p>
    <br/>
    <p>
        Organize your library, create and share lists, rate and review books and track your reads.
        Wether it's current reads, finished books, five-star favorites, to-be-read, books you stopped reading or your wish list
        - everything is just a click away. Discover new ways to enjoy reading.'
    </p>
</div>

@if (loggedInUser.Id != Guid.Empty)
{
    <h2>Your Book Lists</h2>
    @if (userBookLists.Any())
    {
        @foreach (var bookList in userBookLists)
        {
            <h3>@bookList.Name</h3>
            @if (bookList.Books.Any())
            {
                @foreach (var book in bookList.Books)
                {
                    <Bookinfo Book="book"></Bookinfo>
                }
            }
        }
    }
}

@code {
    [Inject] public HttpClient Http { get; set; }
    [Inject] public NavigationManager Navigation { get; set; }
    [Inject] public ILocalStorageService LocalStorageService { get; set; }
    [CascadingParameter] public IModalService ModalService { get; set; }
    private static string loginStorageKey = "loginStamp";
    private string searchText = "";
    private bool showMenu = true;
    private UserDTO loggedInUser = new();
    private List<BookListDTO> userBookLists = new();

    protected override async Task OnInitializedAsync()
    {
        var loggedInUser = await LocalStorageService.GetItemAsync<LoginResponseDTO>(loginStorageKey);
        if (loggedInUser != null && loggedInUser.LoginStamp != Guid.Empty)
        {
            this.loggedInUser = await Http.GetFromJsonAsync<UserDTO>(ApiRoutes.User.GET_UserById(loggedInUser.UserId.Value));
            if (this.loggedInUser != null && this.loggedInUser.Id != Guid.Empty)
            {
                await GetUserBookList();
            }
        }
    }

    private async Task GetUserBookList()
    {
        userBookLists = await Http.GetFromJsonAsync<List<BookListDTO>>(ApiRoutes.BookList.GET_ByUserId(loggedInUser.Id));
        StateHasChanged();
    }

    private void StartSearch()
    {
        Navigation.NavigateTo("/search/" + searchText);
    }

    private void ShowMenu()
    {
        showMenu = !showMenu;
        StateHasChanged();
    }

    private async Task LogOut()
    {
        await LocalStorageService.RemoveItemAsync(loginStorageKey);
        Navigation.Refresh();
    }
}