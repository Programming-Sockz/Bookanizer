@page "/CreateBookList"
@using Blazored.LocalStorage
@using Bookanizer.Shared.DTO
@using Bookanizer.Shared.Enums
@using Bookanizer.Shared.Libraries
<AntDesign.Spin Spinning="isLoading || isSubmitting" Tip="@(isLoading ? "Loading..." : "Submitting...")">
    <div class="create-list">
        <h1>Create a new List:</h1>
        <p>Lists are the best way to organize your library.</p>
        <p>You can create as many as you want!</p>
        <div class="create-form">
            <label><b>List Name: </b></label>
            <input class="create-list-name-input" type="text" @bind="bookList.Name" />
            <button class="create-list-button" @onclick="OnSubmit">Submit</button>
        </div>
        <div class="col p5">
            <select @bind="bookList.ListType">
                @foreach (ListTypes listType in Enum.GetValues(typeof(ListTypes)))
                {
                    <option value="@listType">@listType</option>
                }
            </select>
        </div>
    </div>
    <br/>
</AntDesign.Spin>

@code {
    [Inject] public HttpClient Http { get; set; }
    [Inject] public ILocalStorageService LocalStorageService { get; set; }
    [Inject] public NavigationManager NavigationManager { get; set; }
    private static string loginStorageKey = "loginStamp";
    private UserDTO loggedInUser = new();
    private bool isLoading = true;
    private bool isSubmitting = false;

    private BookListDTO bookList = new();

    protected override async Task OnInitializedAsync()
    {
        var loggedInUser = await LocalStorageService.GetItemAsync<LoginResponseDTO>(loginStorageKey);
        if (loggedInUser != null && loggedInUser.LoginStamp != Guid.Empty)
        {
            this.loggedInUser = await Http.GetFromJsonAsync<UserDTO>(ApiRoutes.User.GET_UserById(loggedInUser.UserId.Value));
            if (this.loggedInUser == null || this.loggedInUser.Id == Guid.Empty)
            {
                NavigationManager.NavigateTo("");
            }
        }
        else
        {
            NavigationManager.NavigateTo("");
        }

        isLoading = false;
    }

    private async Task OnSubmit()
    {
        isSubmitting = true;
        bookList.CreatedById = loggedInUser.Id;
        bookList.CreatedOn = DateTime.Now;

        var result = await Http.PostAsJsonAsync(ApiRoutes.BookList.POST(), bookList);

        if (result.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo("");
        }
    }

}